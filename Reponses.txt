[Question P1.1] 
Comment représentez-vous ces vecteurs ? 
- À l'aide d'une classe Vecteur. 


Comment sont-ils organisés : 
quels attributs ?
En privé, nous avons le seul attribut : un vector de double.

quelles méthodes ? 
En public, nous avons implémenté plusieurs méthodes : 
Void affiche() -- qui affiche les valeurs comprises dans le Vecteur, à l'aide d'une boucle parcourant le tableau.
Void augmente(double valeur) -- qui augmente de 1 la taille du Vecteur, et rajoute à cette case la nouvelle valeur
passée en argument. Il s'agit d'un push_back pour notre classe.
Void set_coord(int position, double valeur) -- qui modifie la valeur contenue à une position donnée
Void get_vecteur() -- pour accéder au Vector<double> vecteur du Vecteur
Bool compare(Vecteur v) -- qui va comparer les deux vecteurs demandés

quels droits d'accès ?
Le seul attribut est en privé, et toutes les méthodes sont en public.

[Question P1.2] 
Quel choix avez vous fait pour les opérations entre vecteurs de dimensions différentes ?
Nous avons choisi d'envoyer un message d'erreur en disant que l'on ne pouvait additionner/soustraire/etc
deux vecteurs de dimensions différentes.
Il est inconcevable en mathématiques de faire ces opérations entre deux vecteurs aux dimensions différentes. 

[Question P4.1] Avez-vous ajouté un constructeur de copie ? Pourquoi (justifiez votre choix) ?
Nous n'avons pas implémenté de constructeur de copie : le constructeur de copie par défaut devrait suffire,
puisque la copie d'un vecteur n'aurait pas de raison d'être différente du vecteur original.

[Question P4.2] Si l'on souhaitait ajouter un constructeur par coordonnées sphériques (deux angles et une longueur)
pour les vecteurs de dimension 3,
a] que cela impliquerait-il au niveau des attributs de la classe ?
L'attribut de classe serait désuet, puisqu'il nous faudrait implémenter d'autres attributs afin de pouvoir supporter
cette représentation.
b] quelle serait la difficulté majeure (voire l'impossibilité) de sa réalisation en C++ ? 
(C'est d'ailleurs pour cela qu'on ne vous demande pas de faire un tel constructeur !)
Sans créer de deuxième classe exclusivement réservée à cette représentation, on pourrait avoir l'envie 
d'utiliser les méthodes fonctionnant avec la représentation cartésienne, qui ne tourneraient pas comme 
on s'y attendrait. Il faudrait faire des choix arbitraires qui seraient visibles en dehors de la classe, 
ce qui briserait l'encapuslation.


[Question P4.3] Quels opérateurs avez vous introduits ?
Nous avons défini en surcharge interne les opérateurs +=, *= avec un scalaire, -=, ^, ~, <<, et * avec un autre vecteur.
À partir de ceux-ci, nous avons défini les opérateurs correspondants en surcharge externe, avec la multplication par un
scalaire à gauche et à droite.
Pour l'opérateur cout, nous avons choisi de représenter les vecteurs avec 5 chiffres significatifs par coordonnée, et
entre parenthèses, comme il est coutume de le faire en mathématiques.

[Question P6.1] Comment se situe cette classe par rapport à la classe Toupie précédemment définie ?
Nous avons choisi de définir la classe cone simple comme une sous-classe de toupie, puisque le cone simple
est une toupie, et devrait donc logiquement hériter de ses attributs ainsi que de l'ensemble de ses méthodes.

[Question P7.1] Comment avez vous conçu votre classe Integrateur ? 
La classe intégrateur fonctionne sans attributs, puisqu'il s'agit d'une "opération" pure.
Comme méthode, nous avons simplement implémenter "évolue", prenant une toupie et un pas de temps en paramètres.
En effet, elle fait évoluer la toupie voulue.

[Question P7.2] Quelle est la relation entre les classes Integrateur et IntegrateurEulerCromer ?
Étant donné qu'un intégrateur d'Euler-Cromer est un intégrateur, il nous a paru clair qu'il fallait le définir comme
une sous-classe d'intégrateur. Nous avons simplement redéfini la méthode évolue, spécifique à cet intégrateur en particulier.

